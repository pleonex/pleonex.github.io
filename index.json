[{"authors":["admin"],"categories":null,"content":"Benito Palacios (also known as pleonex) is a Software Engineer. He studied Electrical Engineering with specialty in Telematics (network infrastructure and protocols) in Granada, Spain. He really loves programming, especially in C# and Python.\nHis hobby is reverse engineering of video games. In his free time, he works with game fan-translation groups in a role of Localization Engineer figuring out and creating programs to edit image and text files.\nBut, as Linus Torvalds said \u0026ldquo;Talk is cheap. Show me the code\u0026rdquo; so don\u0026rsquo;t forget to check out my personal projects in Github (@pleonex) and my C# style guidelines.\n","date":1577285944,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1577285944,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.pleonex.dev/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Benito Palacios (also known as pleonex) is a Software Engineer. He studied Electrical Engineering with specialty in Telematics (network infrastructure and protocols) in Granada, Spain. He really loves programming, especially in C# and Python.\nHis hobby is reverse engineering of video games. In his free time, he works with game fan-translation groups in a role of Localization Engineer figuring out and creating programs to edit image and text files.\nBut, as Linus Torvalds said \u0026ldquo;Talk is cheap.","tags":null,"title":"Benito Palacios (pleonex)","type":"authors"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":"Intro Pokémon Conquest (NDS) is one of the games I would like to translate to Spanish. I have already created almost all the tools to extract, modify and insert the content. This time, I would like to focus in the story dialogs. Below is one example:\n{char:0058}{speaker_color:2}{char_img:0} Hey, you!{wait:48}20 You're {name1}, right? {color:49}Aurora{color:51}'s new Warlord?  If you take a closer look you will notice we are missing something: we don\u0026rsquo;t know the name of the character speaking. This is a very important information for translators, because otherwise they are out of context. For instance, they won\u0026rsquo;t know the gender of the person speaking (in Spanish we have male and female version of nouns and adjetives).\nSo let\u0026rsquo;s try to figure out where are the names and how we can relate them to each dialog.\nThe location of the names First, let\u0026rsquo;s find out where are the names inside the game files. I will pick the name of the person speaking in the example dialog: Koroku. So let\u0026rsquo;s open the game with an hexadecimal editor (I like HxD) and search the text. The search returns that the text is located at 0x00185134. We just need to know which game file is at that address. The easier method is to use Tinke. We open the game with this program and type in the search box the magic words: Offset: 00185134. It will show us at this address we have the file BaseBushou.dat.\nWe ran a quick test that this is indeed the file and field that we need to change by editing the name and importing back the file into the game.\nVoilà. As you can see I changed in the file the name Koroku with Pleonet and now the latter is showing as the character speaking.\nMatching the dialog with the name We know the file that contains the list of names. This is useful in case we want to change them. But we don\u0026rsquo;t know who is speaking in the dialog yet. Let\u0026rsquo;s check again the raw dialog text:\n{char:0058}{speaker_color:2}{char_img:0} Hey, you!{wait:48}20 You're {name1}, right? {color:49}Aurora{color:51}'s new Warlord?  There are a couple of interesting metadata in that dialog. In the actual game file they have binary bytes, but after some try-and-see changes I was able to determine that:\n By changing the first 00058 control code, the name of the person speaking changes. So I named it char from character. The second control code, 2 in some cases changes the color of the person speaking changes. So speaker_color. Finally, the third control code must be the sprite of the NPC. There are several per person to show different emotions, so I named it char_img.  Clearly, the control code we should investigate further is the first one. Somehow the number 0058 is related to the text Koroku. We just need to know what kind of algorithm the game follows to get the text from the number. It\u0026rsquo;s time to do some disassembly.\nAs always, the easier method is to play until the game shows the dialog. Then, we search the text in the memory and put a read-breakpoint in the control code char (in binary 1B 40), so we can start following the game logic to associate the number with the name. In my case the search returned three copies of the text: 0x020C3B66, 0x020C4942 and 0x02263D4E. So three breakpoint since we can\u0026rsquo;t be sure which one the game will actually process.\nThe first one we expect to break is the third breakpoint because it contains the whole script in memory. This is probably the script file in memory. And from this location it will copy the text to another temporary places. And exactly as expected, I see that the game breaks there to copy our first control code argument 0058 into the temporary memory place (the stack): 0x02FE2F38. One more breakpoint there.\nFrom the copy in the stack, it copies now the text into the already-known location of our second breakpoint. So we continue, and the game starts doing something more interesting as shown below:\nThis small algorithm convert the text into a number. The logic is simple: it substract each char 0x30 which is 0 in ASCII. So, 5 in ASCII is 0x35 minus 0x30 is 5. It\u0026rsquo;s this simple to convert a char into a number. Then it multiply the current result by 10 to move the result to the left and adds the next number.\nThe method iterates to try to find three control codes: 1B 40, 1B 73 and 1B 66. In order, they correspond to my named control codes: char, speaker_color and char_img. We found the subrouting that parse the first three control code that each dialog usually have. If the method is able to parse and convert each argument into a number, it stores the result in three output registers. For our number of interest, the result goes to another stack address: 0x02FE2F94. Let\u0026rsquo;s follow now this one.\nThe address was coming from the stack because is a variable from the caller (SP + 0x14). The first thing it does is to fail if the number is larger than 0x270F. Then, it calls again the previous subroutine to parse the numbers, because why not making the game a bit slower? Hands in the next subroutine where it compares our number with 0x3E8, gets the pointer to 0x022797F0 and go deep into the next function. The pointer seems to point to a game file, let\u0026rsquo;s try to find it\u0026hellip; And yes, it\u0026rsquo;s the file ScenarioBushou.dat.\nOur target argument number is actually an index. The game multiplies this number by 0x20 and reads four bytes: 88021264. It removes bits with bitwise shifts so it gets the bits from 17 to 21, in our case just 1. And\u0026hellip; it does nothing with the result. 😦 😑\nBack to the caller, there is still one more place where it can use our number. A few lines after, it checks if the number is between 0 and 1000. If this is the case, it gets again the pointer to ScenarioBushou.dat and call a new function: 0204FB80.\nIt checks if the number is larger than 0xD1, if that\u0026rsquo;s the case it returns an empty string \\0. It gets again our four bytes flag field, but this time it gets the first 9 bits: 64. And just, before finishing this function, it gets the pointer to the file BaseBushou and start doing things.\nIf the number from the flag field is less than 0xFB, it multiplies the number by 0x14 and read four bytes from the file at that location (address: 0x7D0, content: 00967575). It gets the bits from 17 to 25 which is 0x4B. Now, from the file position 0x17A0, it jumps to this last number multiply by 0x0C: 0x02279188.\nRemember this address? Yes! It\u0026rsquo;s pointing to our NPC name. Finally!\nSummary This was a chaos of parsing and reading unncessary files and fields but at the end the logic is simple. The argument of the control code in the dialog text (0058) is the index to an structure with fixed length 32 bytes in ScenarioBushou.dat. We are interested in the first 9 bits of this structure. So we multiply 0058 by 0x20 and get the first 9 bits: 0x64. This is the index to another structure in BaseBushou.dat of fixed length 20 bytes. We multiply this second index by 0x14 and get the name index by reading the bits 17-25: 0x4B. The name will be starting at 0x17A0 multiplying the name index by the name lengths (0x0C).\nPokémon Conquest - Get NPC namePokémon Conquest - Get NPC nameScript fileScript fileDialog to displayDialog to displayFind the control code 1B 40Find the control code 1B 40NoNoYesYesFound?Found?Don\u0026rsquo;t display nameDon\u0026rsquo;t display nameParse 3 ASCII chars into a number: i[Not supported by viewer]ScenarioBushou.datScenarioBushou.datFind the i-th structure of fixed size 32 bytesFind the i-th structure of fixed size 32 bytesGet the bits 0-8: jGet the bits 0-8: jBaseBushou.datBaseBushou.datFind the j-th structure of fixed size 20 bytesFind the j-th structure of fixed size 20 bytesGet the bits 17-25: nGet the bits 17-25: nFind the n-th name of fixed size 12 bytes starting at 0x17A0[Not supported by viewer]Display nameDisplay name\n","date":1577285944,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577285944,"objectID":"2c782b9b9b2b1a6bf1bb434641ef90d0","permalink":"https://www.pleonex.dev/post/pokconq-names/","publishdate":"2019-12-25T15:59:04+01:00","relpermalink":"/post/pokconq-names/","section":"post","summary":"Research in the game Pokémon Conquest from NDS to get the location of the NPC names and the relationship with each dialog box.","tags":["reverse-engineering"],"title":"Pokémon Conquest: NPC names","type":"post"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":"Data Protection Mechanisms in Video Games  Grade: 9.9 / 10   Electrical Engineering Bachelor dissertation. I researched different video games of Nintendo DS to find out how they were protecting different sensitive content like text, video and audio to avoid modifications and/or access. I documented the different algorithms, their weakness and several recommendations to improve the protection.\nAbstract Video games are getting one of the most important elements of our culture. The mobile market boom has made companies behind games like Candy Crush very successful. In that specific case, the game has about 356 millions of unique users and 1.300 millions of dollars in benefits. The video game industry is in fact only before the book\u0026rsquo;s one in top of profits and it gets over music and cinema. It is not only about entertainment but also for education, specially for children, for instance, to learn new languages and help with mathematics.\nAll that benefit makes to think about how to protect against possible \u0026lsquo;attacks\u0026rsquo;. They started fighting piracy with Digital Rights Management techniques, that is, releasing copy of games without permissions from the author, but nowadays it deals with more fields. Mods, cheats in online plays and translations made by fans to languages where the company is going to release a port of the game are only some examples.\nThis project aims to offer a new perspective about game security. In it, we analyze products from Nintendo DS and Play Station 3 devices and mobile platforms like Android and iOS, to show what kind of techniques has been used to protect both text and images files, as well as sound archives. Communication protocols for online services, download content protection and wireless code transmission will be studied too. The general purpose of all these protection is to avoid doing reverse engineering, that is, disassemble the product to study all its pieces and resources.\nReverse engineering is one of the main topics of this dissertation. Usually it is done as a hobby but, with the rights tools and knowledge it is a powerful way to test the security of a system. Related to video games, it is called romhacking, since it is about modify (hack) a game (usually distributed in Read Only Memories). These project will use common tools like disassemblers and debuggers. For instance, for Nintendo DS games two emulators will be used. The first one, DeSmuME, since it is open source, it will allow to hack its code to automatize task and save network packets. The second one, No$GBA, freeware, includes a built-in debugger so it will be used to analyze code and algorithms. Some tools have been developed to help with the task of studying games, like binary searcher, database manager and some game specific exporters. Furthermore, all the methodology followed to figure out formats and algorithms will be explained in detail.\nThis project concludes with a summary of the mechanism analyzed, with recommendations to improve them. Most copyright contents, that usually contains DRM in virtual stores, are not protected in games. That refers to music, electronic books and videos. However, text and images are usually protected with encryption by using XOR operand, HMAC algorithm or a digital signature. About the online services, it will show how bad protocol designs has been found, with some vulnerabilities that allow to users to cheat, but also how in some games the download content has a good protection against external modifications and man-in-the-middle attacks.\n","date":1577278392,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577278392,"objectID":"41d133555ac298a7247363d6a3fcc9f8","permalink":"https://www.pleonex.dev/project/airorom/","publishdate":"2019-12-25T13:53:12+01:00","relpermalink":"/project/airorom/","section":"project","summary":"Bachelor dissertation: _Data protection mechanisms in video games_.","tags":["reverse-engineering"],"title":"Dissertation","type":"project"},{"authors":["Benito Palacios (pleonex)"],"categories":null,"content":"Talk at the DevFest 2018 organized by the GDG Jaén (Google Developer Group). The presentation is about a Twitter thread I did on July. For a week I was figuring out how the game Pokémon Mistery Dungeon Explorers of Sky from Nintendo DS generate and validate a kind of password for rescue missions, special events and object sharing. It almost a study of the assembly code of the game with some notes about the implementation.\nHoy me he puesto el reto de averiguar cómo funcionan las contraseñas de Pokémon Mundo Misterioso (NDS). Son un montón de caracteres \u0026quot;aleatorios\u0026quot; que puedes compartir para que otras personas te rescaten desde sus juegos. Voy a ir contando lo que averiguo 🔽 pic.twitter.com/0ZRz1361Ol\n\u0026mdash; Benito 🧐 (@pleonex) July 8, 2018    ","date":1542474000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542474000,"objectID":"00fb5874c2871494cefaae91c657c8d6","permalink":"https://www.pleonex.dev/talk/devfestjaen18/","publishdate":"2018-11-01T18:00:00+01:00","relpermalink":"/talk/devfestjaen18/","section":"talk","summary":"[Spanish] Reverse engineering of the rescue mission key generation and validation in Pokemon Mystery Dungeon (NDS).","tags":["reverse-engineering"],"title":"El misterio de las claves de Pokémon Mundo Misterioso","type":"talk"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":"     Our team won the challenge!   As part of a group of four students named Prometheus, we participated in an event organized by our university: University of Granada. We participated in the four edition of the so called Tech Challenge. It was sponsored by the company RTI who proposed the topic of the challenge: \u0026ldquo;create a distributed video system\u0026rdquo;. The goal was to simulate a start-up and create from scratch a prototype ready to go to the market. We did a market research, study of prices and present a full proposal with a working prototype.\n   Locaviewer application   Our proposal was a video-system for kindergartens. The objective was that parents could get a clear image of their baby only. For that, we tracked the position of the babies using a Bluetooth wearable device in the wrist. Then, using Bluetooth devices in the walls, we could locate the babies. That allow us to select the camera that had the best video for that person and stream only that video. To send and receive the sensor data and video we use the distributed protocol DDS with the implementation of RTI Connext DDS.\n   DDS design   ","date":1541293260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541293260,"objectID":"06c1e4b29fef204e44979efb710ee27f","permalink":"https://www.pleonex.dev/project/tech-challenge/","publishdate":"2018-11-04T02:01:00+01:00","relpermalink":"/project/tech-challenge/","section":"project","summary":"University competition simulating a start-up.","tags":["iiot","dds"],"title":"IV Tech Challenge","type":"project"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":"    As a member of the GradienWords fan-translation group, I worked in my free time as Localization Engineer to translate from Japanese to Spanish the game: \u0026ldquo;Ni no kuni: Shikkoku no Madoshi\u0026rdquo; for Nintendo DS. In this altruistic project we did reverse engineering in the game to translate all the text and images files as well as edit font files and assembly code.\n     Programming  Create programs to convert text, image, audio and font files in easy formats to edit like XML, TXT, PO, PNG, WAV files. Work together with translators and graphic editors to make easier to edit files and tools. Edit video game source code in assembly format (ARM) to adapt occidental text in the screen. This includes changing: text and image positions, keyboard, font char spaces and increasing text limits. Create build automation programs  Reverse engineering  Figure out file the binary format of text, script, image, font and audio files. Identify security algorithms (encryption, integrity and authentication) to modify DLC and save files.  Game information  Original title: 二ノ国 漆黒の魔導士 (Ni no Kuni: Shikkoku no Madoshi) Game release year: 2010 Platform: Nintendo DS Region: Japan Genre: RPG  Fan translation information  Website Source code Translation: Japanese to Spanish Translated game and magic book Duration: 4 years 2011 - 2015 Released: v1.1 15 May 2015 Team: Jefelin (Luis Salas), Pleonex, Nino48, Lord Raptor (PaladinKnights) Momin Special thanks: Edueleno, Netty Andrew, Time Master, Ayako  ","date":1541293260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541293260,"objectID":"2c57d6ada2a7560a0bc73689a2ab55ca","permalink":"https://www.pleonex.dev/project/ninokuni/","publishdate":"2018-11-04T02:01:00+01:00","relpermalink":"/project/ninokuni/","section":"project","summary":"Game fan-translation of _Ni no Kuni: Shikkoku no Madoshi_ (Nintendo DS) from Japanese to Spanish.","tags":["fan-translation","reverse-engineering"],"title":"Ni no kuni: El mago de las tinieblas","type":"project"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":" Deprecated program. Superseded by Yarhl\nDon\u0026rsquo;t judge the code, I wrote the whole program while learning programming 😄\n  Tinke is a program to see, convert, and edit the files of NDS games. You can see a lot of format files like images, text, sounds, fonts and textures. Furthermore it works with plugins made in NET Framework languages (C# and VB.NET) so it\u0026rsquo;s so easy to support new formats.\nFeatures  Show the ROM header with the banner and edit it. Show and convert to common format a lot of files. Edit a lot of image files from BMP files (NCLR, NCGR, NSCR, NCER), audio files from WAV (SWAV, SWAR, STRM) and fonts (NFTR). Hexadecimal visor. Change the content of the files and save the new ROM. Translated to multiple languages.          ","date":1541293260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541293260,"objectID":"adda8fa95d00cbbac115b7f88b5fbc94","permalink":"https://www.pleonex.dev/project/tinke/","publishdate":"2018-11-04T02:01:00+01:00","relpermalink":"/project/tinke/","section":"project","summary":"Program to modify files from Nintendo DS games. Superseded by Yarhl.","tags":["reverse-engineering"],"title":"Tinke","type":"project"},{"authors":["Benito Palacios (pleonex)"],"categories":[],"content":"Yarhl (Yet Another ROM Hacking Library) is a library for ROM Hacking and fan-translation projects. It provides a virtual file system, file format and format conversion features and plugin support. It\u0026rsquo;s built in C# / .NET and works in Windows, Linux and Mac OS X.\nDocumentation Check our on-line API overview: Mastering Yarhl and the API documentation here.\nInstall Stable releases are available from nuget.org:\n Yarhl Yarhl.Media  ","date":1541293260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541293260,"objectID":"06d7fc04d3e96081a3401ee2bbbd87be","permalink":"https://www.pleonex.dev/project/yarhl/","publishdate":"2018-11-04T02:01:00+01:00","relpermalink":"/project/yarhl/","section":"project","summary":"_Yet Another ROM Hacking Library (Yarhl)_ is a quality-focused library for file format converters.","tags":["reverse-engineering"],"title":"Yarhl","type":"project"},{"authors":["Benito Palacios (pleonex)"],"categories":null,"content":"Live streaming from Twitch requested by the TraduSquare community. This time I talked about the file format of the images, sprites and textures in video-games and all the kind of compression and techniques used in the Nintendo DS.\n  ","date":1539428400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539428400,"objectID":"6be1f2207c03e0997cc05fde5c0350d1","permalink":"https://www.pleonex.dev/talk/rh02-img/","publishdate":"2018-11-05T02:00:00+01:00","relpermalink":"/talk/rh02-img/","section":"talk","summary":"[Spanish] Image concepts and formats in games.","tags":["reverse-engineering","course"],"title":"ROM Hacking Level 02: Imágenes","type":"talk"},{"authors":["Benito Palacios (pleonex)"],"categories":null,"content":"Live streaming from the virtual reality platform AltspaceVR. The talk explains different topics and concept related to text formats like encodings, tables, fonts and compression.\n  ","date":1528542000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1528542000,"objectID":"4a33ea5d936cdf3450e5bac80dae5d14","permalink":"https://www.pleonex.dev/talk/rh01-text/","publishdate":"2018-11-05T02:00:00+01:00","relpermalink":"/talk/rh01-text/","section":"talk","summary":"[Spanish] Text format, encoding and compression in games.","tags":["reverse-engineering","course"],"title":"ROM Hacking Level 01: Textos","type":"talk"},{"authors":["Benito Palacios (pleonex)"],"categories":null,"content":"Talk at the JASyP (Jornadas de Anonimato, Seguridad y Privacidad). Organized by the group Interferencias in the University of Granada. I talked about the security mechanisms like encryption that we can find inside of the video-games with the goal to obfuscate their files to avoid hacks, mods and fan-translations.\n  ","date":1523639700,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523639700,"objectID":"b052579ceae44b7f0315148e688fd9c4","permalink":"https://www.pleonex.dev/talk/jasyp18/","publishdate":"2018-11-05T02:00:00+01:00","relpermalink":"/talk/jasyp18/","section":"talk","summary":"[Spanish] Data protection mechanisms in games.","tags":["reverse-engineering"],"title":"Destripando juegos: protecciones anti ROM Hacking","type":"talk"},{"authors":["Benito Palacios (pleonex)"],"categories":null,"content":"Talk at the IEEE Developer Days organized by the association IEEE Student Branch of Elche. I talked about the Industrial Internet of Things (IIoT) and the main network protocols and framework in the market. I gave details on how one of them, DDS, works with a demo.\n","date":1494576000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494576000,"objectID":"1796548bff8864094eb2684fbfe31d8a","permalink":"https://www.pleonex.dev/talk/iiot-dds/","publishdate":"2018-11-01T18:00:00+01:00","relpermalink":"/talk/iiot-dds/","section":"talk","summary":"[Spanish] Industrial Internet of Thinkgs (IIoT) and main protocols and framework.","tags":["dds","iiot"],"title":"Protocolos del Industrial IoT","type":"talk"}]